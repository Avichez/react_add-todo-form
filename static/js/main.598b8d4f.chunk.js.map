{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","todosWithUser","userId","usersFromServer","find","App","useState","titleInput","setTitleInput","userSelect","setUserSelect","isFormChecked","setFormChecked","setTodos","setTodoId","listId","Math","max","addNewTodo","selectedUser","Error","newTodo","prevTodos","isUserSelected","isTitleFilled","action","method","onSubmit","event","preventDefault","type","value","placeholder","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.598b8d4f.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TodoUser } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoUser,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoUser } from '../../types/todo';\n\ntype Props = {\n  todos: TodoUser[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoUser } from './types/todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst todosWithUser: TodoUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId) || null,\n}));\n\nexport const App: React.FC = () => {\n  const [titleInput, setTitleInput] = useState('');\n  const [userSelect, setUserSelect] = useState('');\n  const [isFormChecked, setFormChecked] = useState(false);\n  const [todos, setTodos] = useState<TodoUser[]>(todosWithUser);\n\n  const setTodoId = () => {\n    const listId = todos.map(todo => todo.id);\n\n    return Math.max(...listId) + 1;\n  };\n\n  const resetForm = () => {\n    setTitleInput('');\n    setUserSelect('');\n    setFormChecked(false);\n  };\n\n  const addNewTodo = () => {\n    const selectedUser = usersFromServer.find(user => user.id === +userSelect);\n\n    if (!selectedUser) {\n      throw new Error('no such user');\n    }\n\n    const newTodo = {\n      id: setTodoId(),\n      title: titleInput,\n      completed: false,\n      userId: selectedUser.id,\n      user: selectedUser,\n    };\n\n    setTodos(prevTodos => ([\n      ...prevTodos,\n      newTodo,\n    ]));\n\n    resetForm();\n  };\n\n  const handleSubmitTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setFormChecked(true);\n\n    if (titleInput && userSelect) {\n      addNewTodo();\n    }\n  };\n\n  const isUserSelected = isFormChecked && !userSelect;\n  const isTitleFilled = isFormChecked && !titleInput;\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmitTodo}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              value={titleInput}\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              onChange={(event) => setTitleInput(event.target.value)}\n            />\n          </label>\n\n          {isTitleFilled && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userSelect}\n              onChange={(event) => setUserSelect(event.target.value)}\n            >\n              <option value=\"0\">Choose a user</option>\n              {usersFromServer.map(({ id, name }) => (\n                <option key={id} value={id}>{name}</option>\n              ))}\n            </select>\n          </label>\n\n          {isUserSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}